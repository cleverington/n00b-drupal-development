[[pm-guide]]
=== Managing the project

This section assumes that your project is to write a new book that is divided up
into topics, you want to use volunteers as much as possible for writing,
testing, and editing, and you plan to use a Drupal.org project and issue
queue. See also <<manage-notes>>.

You may want to use files from the
https://www.drupal.org/project/user_guide[User Guide project home page] as a
starting point when following these instructions.


[[pm-guide-commits]]
==== Committing changes

When committing changes from contributors (writers and editors) to the guide:

* Check the checklist for the phase -- see <<phase-checklists>>. If the
checklist has not been satisfied, do not make the commit. Especially, insist
on attributions information.

* Make sure to update the attributions.txt file as well as the topic file.

* Make sure to put any attached images in the images directory.

* When making the commit, use the section at the bottom of the issue page to
compose the commit message. Make sure that the author radio button is chosen
for the primary writer or editor for the issue, and that checkboxes for
everyone who contributed substantially to this phase are checked.
This will give everyone involved the proper credit.

* If there is a project manager follow-up checklist (such as the guidelines
check after writing tasks), do that.


[[pm-guide-project-setup]]
==== Setting up a new project

When starting a new project, it is a good idea for the project coordinators to
define the outline ahead of time. The outline consists of a list of topics,
organized into chapters, and you'll need to define the name of each topic, its
file name, what each topic should cover, and the ordering and organization into
chapters.

Another aspect of the plan, if it is some type of user guide material, is to
come up with a guiding scenario, which provides a unified context for all of the
topics. As an example, in the User Guide project, we selected the scenario of
creating a web site for a farmers market, and we made sure that whenever
examples were called for in topics, they were related to this scenario. You'll
also need to create (or find) sample text and images related to the scenario,
which authors of topics can use in their writing and screenshots. Make sure the
sample images have compatible licenses. A good place to search for images
(you'll still have to check the licenses) is
https://commons.wikimedia.org[Wikimedia Commons].

Ideally, each topic in this guide should be reusable (assuming that another
project uses the same guiding scenario, anyway). To facilitate that:

* Separate task information and concept information into separate
topics. Cross-reference the concept topic in the task topic, rather than
describing the concept again.

* Titles for task topics should be in the format +Verbing a Noun+ or +Verbing
Nouns+; examples:  _Creating a block_, _Configuring date formats_. Titles for
concept topics should usually be in the format +What is a Noun?+ or +What are
Nouns?+; example: _What is a block?_.

* Make each concept topic cover one concept rather than multiple
concepts. Cross-reference related topics and required background knowledge.

* Make each task topic cover the minimal amount of actions that makes sense to
stand alone. Reference prerequisite and follow-on tasks rather than describing
them in the same topic.

Once you've defined what the outline and scenario should be, follow these
instructions to set up the project and instructions pages (some of the
instructions assume this setup and directory structure). Note that you can also
start the process with just a few topics, and then add to the outline as
you decide on more of it (see <<pm-guide-topics>>). Here are the suggested steps
for initiating a project:

. Using the templates in <<templates>>, make a template file for each
topic. You'll need to edit the ID at the top, rename the file to
whatever-the-id-is.txt, and put in the topic title (probably prefixed by
UNWRITTEN). Add these to the Git repository for the project.

. Make an overall book file that includes each topic file and defines the
chapters, and add this to the Git repository. See _guide.txt_ in the User Guide
project for an example.

. Write up a topic in the preface explaining what the scenario is. This needs to
be in place before contributors start writing other topics.

. Make an _assets_ directory for the project. Put the sample images there, as
well as a file called _text.txt_ with the sample text in it, and _colors.txt_
with color information in it.

. Make an _attributions.txt_ file for keeping track of who wrote the
topic. See _attributions.txt_ in the User Guide project for an example. Add
attributions information for the image assets, and for the project
coordinators.

. Make build scripts for the project and test them. Add these to the Git
repository.

. Make a shared spreadsheet (such as a Google Sheets document) to track
topics. You may choose to let volunteers edit the spreadsheet, or you can let
them use update issues and have the project managers update the
spreadsheet. It is still useful to let volunteers view the spreadsheet, even if
they cannot edit it. Columns needed in the spreadsheet:
  * Title of topic
  * File name of topic
  * What it covers

. Decide what the development phases should be. Suggestion:
+
  * Writing: Volunteers write a rough draft of each topic, with rough
  screenshots.

  * Guidelines editing: It can be discouraging for volunteers if there are too
  many things to remember and too many guidelines to follow, especially during
  the initial writing phase. So rather than forcing the writing phase volunteers
  to have perfect formatting and follow all of the writing guidelines, you may
  want to instead enforce a minimal set of good writing guidelines during the
  writing phase, and then after accepting a topic, have the project managers
  (who will be more familiar with the guidelines) do a more thorough review for
  a defined set of guidelines. If the changes needed are small, the project
  manager who reviewed for guidelines can make the fixes directly; if they are
  more extensive, they can file an issue to get a volunteer to make the changes.

  * Testing: You might consider having one or more interactive sessions where
  volunteers (with project coordinators present) attempt to read the text in
  order and follow its instructions, and either the volunteers or the
  coordinators make notes on what was unclear or didn't work. Note that in some
  cases, they will also need to do the Follow-on tasks, if they are listed as
  Site Prerequisites in a later topic, so they may find they need to backtrack
  now and then. You may also want to have experts review the text for accuracy,
  especially the concept topics.

  * Copy editing

. Set up an Instructions book (like this one). To do that, you'll probably want
to start with a copy the files in the User Guide project's _guidelines_
directory. You'll need to make a new _management.txt file (about project
managers and communication channels), and you'll also need to set up a new
_guidelines.conf_ file in the _scripts_ directory with variable
substitutions. Most of the other stuff should be OK as it is, if you've followed
these instructions.

. Initiate the first phase. See <<pm-guide-new-phase>>.

[[pm-guide-topics]]
==== Adding new topics

If you need to add a new topic after the project is already started:

. Add the topic to the tracking spreadsheet, filling in the "covers"
information and defining the file name.

. Copy the correct template file (task or concept) to the desired file name.

. Edit the ID and the topic title in the file -- *the ID should be the file name
without the .txt extension*.

. Add the file to the outline file and attributions file.

. Commit the changes.

. Make an issue for the writing phase for the topic, and add this to the
spreadsheet. See <<phase-checklists-writing>>.

There is a Perl script in the _scripts_ directory of the User Guide project
called _mktopics.pl_ that will make a batch of topics from templates.


[[pm-guide-new-phase]]
==== Starting a new phase

For each phase, follow these steps:

. Divide the effort for the phase into independent tasks that can be completed
by volunteers in a reasonably small amount of time. For the writing phase, the
tasks should be writing individual topics. For the testing phase, there may be
some specific tasks, such as "Have the Security team review the book for
accuracy", but some testing may be best done in an interactive session. For copy
editing, some tasks could be things like "Make sure to always say _directory_
and not _folder_", and others could be "Do a general copy edit on a topic".

. Define the time frame for each task to be completed by a volunteer. Two weeks
is reasonable.

. Make an issue for each task. It is much clearer for volunteers if the issues
are created by the project managers. Make sure the issue either provides
instructions for the volunteer or links to the instructions. Also, include the
checklist for the phase in the issue summary. See <<phase-checklists>>.

. Add entries to the tracking spreadsheet for the issues. You may need a new tab
on the spreadsheet, or if the issues are one-per-topic, you can add columns to
the topic sheet, such as:
  * Volunteer working on it
  * Date started
  * Status
  * Issue link

. Announce the phase and recruit volunteers.

[[pm-guide-translating]]
==== Setting up for translations

*Note: This section is rough since we have not gotten to the Translating stage
yet.*

Things to include when we write up this section:

* Need to write up the translators guide in the practicaliites.txt file in
this guidelines/instructions book.

* Put translations into source/[language code] folder. For each new language,
start by copying in the English files.

* Keep file names and IDs the same (in English) -- they are not displayed to the
user and file names being the same aids in figuring out the correspondence.

* Translators will need to re-alphabetize the Glossary. Keep the IDs the same
(in English).

* Additional references sections - This is for outside references, and most or
all are in English. Translators will need to replace with references in their
language if possible. They can include English references but make sure they are
noted as such.
